// 문제
// 데이터 처리 전문가가 되고 싶은 "어피치" 는 문자열을 압축하는 방법에 대해 
// 공부를 하고 있습니다. 최근에 대량의 데이터 처리를 위한 간단한 비손실 압축 방법에
// 대해서 공부를 하고 있는데 문자열에서 같은 값이 연속해서 나타나는 것을 그 문자의 
// 개수와 반복되는 값으로 표현하여 더 짧은 문자열로 줄여서 표현하는 알고리즘을
// 공부하고 있습니다. 
// 간단한 예로 "aabbaccc"의 경우 "2a2ba3c"(문자가 반복되지 않아 한번만 나타난 경우 1은 생략함)와 같이 표현할 수 있는데, 
// 이러한 방식은 반복되는 문자가 적은 경우 압축률이 낮다는 단점이 있습니다. 예를 들면, "abcabcdede"와 같은 문자열은 전혀 압축되지 않습니다.
// "어피치"는 이러한 단점을 해결하기 위해 문자열을 1개 이상의 단위로 잘라서 압축하여 더 짧은 문자열로 표현할 수 있는지 방법을 찾아보려고 합니다.

// 예를 들어, "ababcdcdababcdcd"의 경우 문자를 1개 단위로 자르면 전혀 압축되지 않지만, 2개 단위로 잘라서 압축한다면 "2ab2cd2ab2cd"로 표현할 수 있습니다. 
// 다른 방법으로 8개 단위로 잘라서 압축한다면 "2ababcdcd"로 표현할 수 있으며, 이때가 가장 짧게 압축하여 표현할 수 있는 방법입니다.
// 다른 예로 "abcabcdede"와 같은 경우 문자를 2개 단위로 잘라서 압축하면 "abcabc2de"가 되지만, 3개 단위로 자른다면 "2abcdede"가 되어 3개 단위가 가장 짧은 압축 방법이 됩니다. 
// 이때 3개 단위로 자르고 마지막에 남는 문자열은 그대로 붙여주면 됩니다.
// 압축할 문자열 s가 매개변수로 주어질 때, 위에 설명한 방법으로 1개 이상 단위로 문자열을 잘라 압축하여 표현한 문자열 중 가장 짧은 것의 길이를 return 하도록 solution 함수를 완성해주세요.

// 제한사항
// s의 길이는 1 이상 1,000 이하입니다.
// s는 알파벳 소문자로만 이루어져 있습니다.

// 완전탐색
// substring()메소드는 string 객체의 시작 인덱스로 부터 종료 인덱스 전 까지 문자열의 부분 문자열을 반환합니다. 
// sort()는 배열 안에 원소를 정렬하는 함수이다.

function solution(s) {
    //s는 압축할 문자열..
    let length  = s.length; // s의 전체 길이를 length에 넣음
    let newArr = [];
    //몇개단위로 자를지확인
    for(let i=0;i<length;i++){
           let pos = i+1; //몇개 단위
            //단위를 가지고 이제 반복하는 문 작성...
            let result = "";
            let count = 1; //몇번 반복되었는지 기록할 변수..
            for(let j=0;j<length;j=j+pos){
               let word  = s.substring(j,j+pos); //현재 자른 문자열
               let nextword = s.substring(j+pos,j+pos+pos); //다음 잘릴 문자열..
                if(word===nextword){
                    count++; //횟수 추가..
                }
                else 
                {
                    if(count===1){ //한번밖에 반복 되지않으면 앞에 1을 붙이지 않는다.
                        result = result + word;                        
                    }
                    else{
                        result = result+ count + word;
                    }
                    count = 1; //초기화
                }
           }
            
        newArr.push(result);           
    }
    newArr.sort(function(a,b){
        return a.length - b.length; //길이별로 sort 
    })
    
    return newArr[0].length; //제일 작은 길이 출력
}